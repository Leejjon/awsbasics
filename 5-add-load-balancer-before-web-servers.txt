
https://docs.google.com/drawings/d/e/2PACX-1vTHfpUoYlwg2jKWnIrtmRWpset1M8gTcdCgrdpRQNzrd5qglGuAmoqcNuS_lgnYTZrYz4MIaMjeh1bG/pub?w=960&h=720

aws init = set up connection
aws iam get-user = show what user is currently used

// List all vpcs
aws ec2 describe-vpcs

// Create VPC
aws ec2 create-vpc --cidr-block 172.31.0.0/16

// Give VPC a name
aws ec2 create-tags --resources vpc-04f53b26552a874ba --tags Key=Name,Value=basic-vpc

// Show the three different availability zones of eu-central-1
aws ec2 describe-availability-zones

// List subnets (you'll also see the subnets of the default vpc, ignore them)
aws ec2 describe-subnets

// List subnets by vpc id
aws ec2 describe-subnets --filters Name=vpc-id,Values=vpc-04f53b26552a874ba

// Create public subnets in two of these three, two is fine enough for our demo purposes.
aws ec2 create-subnet --cidr-block 172.31.0.0/24 --vpc-id vpc-04f53b26552a874ba --availability-zone-id euc1-az2
aws ec2 create-subnet --cidr-block 172.31.1.0/24 --vpc-id vpc-04f53b26552a874ba --availability-zone-id euc1-az3

// Create two private subnets
aws ec2 create-subnet --cidr-block 172.31.2.0/24 --vpc-id vpc-04f53b26552a874ba --availability-zone-id euc1-az2
aws ec2 create-subnet --cidr-block 172.31.3.0/24 --vpc-id vpc-04f53b26552a874ba --availability-zone-id euc1-az3

// Giving subnets name tags
aws ec2 create-tags --resources subnet-0d0ef1f270d7f4f74 --tags Key=Name,Value=public-subnet-a
aws ec2 create-tags --resources subnet-0a04f996d4d867e76 --tags Key=Name,Value=public-subnet-b
aws ec2 create-tags --resources subnet-093ea7a0e05a541a7 --tags Key=Name,Value=private-subnet-a
aws ec2 create-tags --resources subnet-07c908ced8ef41ac5 --tags Key=Name,Value=private-subnet-b

// List internet gateways
aws ec2 describe-internet-gateways

// Create an internet gateway
aws ec2 create-internet-gateway
aws ec2 create-tags --resources igw-0bf1d2d1486b2aa1e --tags Key=Name,Value=internet-gateway

// Attach it to our VPC
aws ec2 attach-internet-gateway --vpc-id vpc-04f53b26552a874ba --internet-gateway-id igw-0bf1d2d1486b2aa1e

// Creating a route table for the public subnets
aws ec2 create-route-table --vpc-id vpc-04f53b26552a874ba
aws ec2 create-route --route-table-id rtb-0bbdd585c1ec7dc9c --destination-cidr-block 0.0.0.0/0 --gateway-id igw-0bf1d2d1486b2aa1e
aws ec2 create-tags --resources rtb-0bbdd585c1ec7dc9c --tags Key=Name,Value=public-route-table

// Attach the public route tables to the public subnets
aws ec2 associate-route-table --subnet-id subnet-0d0ef1f270d7f4f74 --route-table-id rtb-0bbdd585c1ec7dc9c
aws ec2 associate-route-table --subnet-id subnet-0a04f996d4d867e76 --route-table-id rtb-0bbdd585c1ec7dc9c

// Give everything in the public subnet a public ip:
aws ec2 modify-subnet-attribute --subnet-id subnet-0d0ef1f270d7f4f74 --no-map-public-ip-on-launch
aws ec2 modify-subnet-attribute --subnet-id subnet-0a04f996d4d867e76 --no-map-public-ip-on-launch

HIER WAS IK

// Create a NAT gateway in the public subnet
// A NAT gateway needs an elastic ip address (costs 0.01 cent per hour or 7dollar a month)
aws ec2 allocate-address
aws ec2 create-nat-gateway --subnet-id subnet-0d0ef1f270d7f4f74 --allocation-id eipalloc-d683e5e9
aws ec2 allocate-address
aws ec2 create-nat-gateway --subnet-id subnet-0a04f996d4d867e76 --allocation-id eipalloc-4acfa975

// Naming the NAT gateways
aws ec2 create-tags --resources nat-074767bb4ee923bb3 --tags Key=Name,Value=nat-gateway-private-subnet-a
aws ec2 create-tags --resources nat-0e1201a5cab7588b8 --tags Key=Name,Value=nat-gateway-private-subnet-b

// Create route tables for private subnet with outbound rule that points all traffic 0.0.0.0/0 to the nat gateway
aws ec2 create-route-table --vpc-id vpc-04f53b26552a874ba
aws ec2 create-route --route-table-id rtb-0d1935c156186e5f7 --destination-cidr-block 0.0.0.0/0 --gateway-id nat-074767bb4ee923bb3
aws ec2 create-tags --resources rtb-0d1935c156186e5f7 --tags Key=Name,Value=private-route-table-a

// Create route tables for private subnet with outbound rule that points all traffic 0.0.0.0/0 to the nat gateway
aws ec2 create-route-table --vpc-id vpc-04f53b26552a874ba
aws ec2 create-route --route-table-id rtb-08f5c989a905413ee --destination-cidr-block 0.0.0.0/0 --gateway-id nat-0e1201a5cab7588b8
aws ec2 create-tags --resources rtb-08f5c989a905413ee --tags Key=Name,Value=private-route-table-b

// Attach the private route tables to the private subnets
aws ec2 associate-route-table --subnet-id subnet-093ea7a0e05a541a7 --route-table-id rtb-0d1935c156186e5f7
aws ec2 associate-route-table --subnet-id subnet-07c908ced8ef41ac5 --route-table-id rtb-08f5c989a905413ee

aws ec2 describe-security-groups

// Create security group in VPC with outbound access to 0.0.0.0/0 on port 80
aws ec2 create-security-group --group-name web-servers --description "Security group for web servers" --vpc-id vpc-04f53b26552a874ba
aws ec2 authorize-security-group-ingress --group-id sg-04814ad259800944e --protocol tcp --port 80 --source-group sg-0058a772bf77bd84e

// Create security group for application load balancer
aws ec2 create-security-group --group-name load-balancer-group --description "Security group for load balancer" --vpc-id vpc-04f53b26552a874ba
aws ec2 authorize-security-group-ingress --group-id sg-0058a772bf77bd84e --protocol tcp --port 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-egress --group-id sg-0058a772bf77bd84e --protocol tcp --port 80 --source-group sg-04814ad259800944e

https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancer-cli.html
https://aws.amazon.com/premiumsupport/knowledge-center/public-load-balancer-private-ec2/
https://docs.aws.amazon.com/elasticloadbalancing/latest/application/tutorial-application-load-balancer-cli.html

// So aws has something called "Systems manager" https://aws.amazon.com/systems-manager/
// to be able to use it, we need to create a role for future EC2 instance to be able to SSH
// https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html

aws iam create-role --role-name ec2-role --assume-role-policy-document file://roles/ec2-role.json
aws iam attach-role-policy --role-name ec2-role --policy-arn "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
aws iam create-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances
aws iam add-role-to-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances --role-name ec2-role

// Create application load balancer
aws elbv2 create-load-balancer --name application-load-balancer --subnets subnet-0d0ef1f270d7f4f74 subnet-0a04f996d4d867e76 --security-groups sg-0058a772bf77bd84e

arn:aws:elasticloadbalancing:eu-central-1:039085306114:loadbalancer/app/application-load-balancer/97cf62a2e2f0b615

// Create target group
aws elbv2 create-target-group --name node-ec2-instances --protocol HTTP --port 80 --vpc-id vpc-04f53b26552a874ba



// Create ec2 instance ami-0db9040eb3ab74509
aws ec2 run-instances --image-id ami-0db9040eb3ab74509 --count 1 --instance-type t2.micro --security-group-ids sg-04814ad259800944e --subnet-id subnet-093ea7a0e05a541a7 --iam-instance-profile Name=ssm-instance-profile-for-ec2-instances
aws ec2 run-instances --image-id ami-0db9040eb3ab74509 --count 1 --instance-type t2.micro --security-group-ids sg-04814ad259800944e --subnet-id subnet-07c908ced8ef41ac5 --iam-instance-profile Name=ssm-instance-profile-for-ec2-instances

aws ssm describe-instance-information

// SSH into ec2 instance via AWS Systems Manager
aws ssm start-session --target i-0d0b4f0f2f855d192

Type 'bash' and 'cd '.

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html

Check out the nvm github for the latest install script to install nvm:
https://github.com/nvm-sh/nvm/blob/master/README.md

After running the above script it outputs a script you can run to get nvm available on your path

// Install the latest Node.js,
nvm install node

Execute the following commands to create a node project:
mkdir hello-world
cd hello-world
touch index.js (paste the contents from hello-world/index.js)

Run the following command to start node:
node index.js &

The node server uses port 8080 instead of 80, because 80 is not allowed without running as root (which is not recommended).

To make sure incoming traffic on port 80 gets redirected to our node server, run the following:
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
Source: https://gist.github.com/kentbrew/776580

Try to reach it with a browser on the public ip that was given to the instance
http://xx.xx.xx.xx/

It should return a 200 response and hello world.

You can kill it with:
ps -e grep node
kill -9 <the first number of previous command>

Source: https://stackoverflow.com/questions/20091433/cant-find-out-where-does-a-node-js-app-running-and-cant-kill-it

// Back to the loadbalancer, let's add the instances to the target group:
aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:eu-central-1:039085306114:targetgroup/node-ec2-instances/9176b6bba0bec4b2 --targets Id=i-0cc40deb924d82544 Id=i-0d0b4f0f2f855d192

// Create listener with target group and loadbalancer
aws elbv2 create-listener --load-balancer-arn arn:aws:elasticloadbalancing:eu-central-1:039085306114:loadbalancer/app/application-load-balancer/396043a506bd945d --protocol HTTP --port 80 --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:eu-central-1:039085306114:targetgroup/node-ec2-instances/9176b6bba0bec4b2

Note: Access logging is an optional feature of Elastic Load Balancing that is disabled by default. After you enable access logging for your load balancer, Elastic Load Balancing captures the logs and stores them in the Amazon S3 bucket that you specify as compressed files. You can disable access logging at any time.
Source: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
