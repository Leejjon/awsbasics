https://www.youtube.com/watch?v=hiKPPy584Mg&t=76s
https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html#vpc-subnets-commands-example-public-subnet

aws init = set up connection
aws iam get-user = show what user is currently used

// List all vpcs
aws ec2 describe-vpcs

// Create VPC
aws ec2 create-vpc --cidr-block 172.31.0.0/16

// Delete VPC
aws ec2 delete-vpc --vpc-id <id>

// Give VPC a name
aws ec2 create-tags --resources vpc-0cfbc96fbaef27b5e --tags Key=Name,Value=basic-vpc

// Show the three different availability zones of eu-central-1
aws ec2 describe-availability-zones

// List subnets (you'll also see the subnets of the default vpc, ignore them)
aws ec2 describe-subnets

// List subnets by vpc id
aws ec2 describe-subnets --filters Name=vpc-id,Values=vpc-0cfbc96fbaef27b5e

// Create public subnets in two of these three, two is fine enough for our demo purposes.
aws ec2 create-subnet --cidr-block 172.31.0.0/24 --vpc-id vpc-0cfbc96fbaef27b5e --availability-zone-id euc1-az2
aws ec2 create-subnet --cidr-block 172.31.1.0/24 --vpc-id vpc-0cfbc96fbaef27b5e --availability-zone-id euc1-az3

// Create two private subnets
aws ec2 create-subnet --cidr-block 172.31.2.0/24 --vpc-id vpc-0cfbc96fbaef27b5e --availability-zone-id euc1-az2
aws ec2 create-subnet --cidr-block 172.31.3.0/24 --vpc-id vpc-0cfbc96fbaef27b5e --availability-zone-id euc1-az3

// Delete public and private subnets
aws ec2 delete-subnet --subnet-id subnet-066be760f64aba411
aws ec2 delete-subnet --subnet-id subnet-0f81e9d1e089a99da
aws ec2 delete-subnet --subnet-id subnet-050bcaac94fba9394
aws ec2 delete-subnet --subnet-id subnet-09b288533a25a19c9

// Giving subnets name tags
aws ec2 create-tags --resources subnet-066be760f64aba411 --tags Key=Name,Value=public-subnet-a
aws ec2 create-tags --resources subnet-0f81e9d1e089a99da --tags Key=Name,Value=public-subnet-b
aws ec2 create-tags --resources subnet-050bcaac94fba9394 --tags Key=Name,Value=private-subnet-a
aws ec2 create-tags --resources subnet-09b288533a25a19c9 --tags Key=Name,Value=private-subnet-b

// List internet gateways
aws ec2 describe-internet-gateways

// Create an internet gateway
aws ec2 create-internet-gateway
aws ec2 create-tags --resources igw-01f198426702b59af --tags Key=Name,Value=internet-gateway

// Attach it to our VPC
aws ec2 attach-internet-gateway --vpc-id vpc-0cfbc96fbaef27b5e --internet-gateway-id igw-01f198426702b59af

// Creating a route table for the public subnets
aws ec2 create-route-table --vpc-id vpc-0cfbc96fbaef27b5e
aws ec2 create-route --route-table-id rtb-04c386fe8410bb542 --destination-cidr-block 0.0.0.0/0 --gateway-id igw-01f198426702b59af
aws ec2 create-tags --resources rtb-04c386fe8410bb542 --tags Key=Name,Value=public-route-table

// Attach the public route tables to the public subnets
aws ec2 associate-route-table --subnet-id subnet-066be760f64aba411 --route-table-id rtb-04c386fe8410bb542
aws ec2 associate-route-table --subnet-id subnet-0f81e9d1e089a99da --route-table-id rtb-04c386fe8410bb542

// Give everything in the public subnet a public ip:
aws ec2 modify-subnet-attribute --subnet-id subnet-066be760f64aba411 --map-public-ip-on-launch
aws ec2 modify-subnet-attribute --subnet-id subnet-0f81e9d1e089a99da --map-public-ip-on-launch

// Create a NAT gateway in the public subnet
// A NAT gateway needs an elastic ip address (costs 0.01 cent per hour or 7dollar a month)
aws ec2 allocate-address
aws ec2 create-nat-gateway --subnet-id subnet-066be760f64aba411 --allocation-id eipalloc-ac7b7f95

// Create route tables for private subnet with outbound rule that points all traffic 0.0.0.0/0 to the nat gateway
aws ec2 create-route-table --vpc-id vpc-0cfbc96fbaef27b5e
aws ec2 create-route --route-table-id rtb-00b351ba1c55f8b50 --destination-cidr-block 0.0.0.0/0 --gateway-id nat-08119640b82d74026
aws ec2 create-tags --resources rtb-00b351ba1c55f8b50 --tags Key=Name,Value=private-route-table

// Attach the private route tables to the private subnets
aws ec2 associate-route-table --subnet-id subnet-050bcaac94fba9394 --route-table-id rtb-00b351ba1c55f8b50
aws ec2 associate-route-table --subnet-id subnet-09b288533a25a19c9 --route-table-id rtb-00b351ba1c55f8b50

// So aws has something called "Systems manager" https://aws.amazon.com/systems-manager/
// to be able to use it, we need to create a role for future EC2 instance to be able to SSH
// https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-service.html

aws iam create-role --role-name ec2-role --assume-role-policy-document file://roles/ec2-role.json
aws iam attach-role-policy --role-name ec2-role --policy-arn "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
aws iam create-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances
aws iam add-role-to-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances --role-name ec2-role

// In case of deleting roles
aws iam remove-role-from-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances --role-name ec2-role
aws iam delete-instance-profile --instance-profile-name ssm-instance-profile-for-ec2-instances
aws iam detach-role-policy --role-name ec2-role --policy-arn "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
aws iam delete-role --role-name ec2-role

// For some reason this all

// Create EC2 instance
aws ec2 create-key-pair --key-name key-pair-for-instance1 --query 'KeyMaterial' --output text > key-pair-for-instance1.pem
aws ec2 create-key-pair --key-name key-pair-for-instance2 --query 'KeyMaterial' --output text > key-pair-for-instance2.pem

chmod 400 key-pair-for-instance1.pem

// Create security group in VPC and add rule for allowing ssh
aws ec2 describe-security-groups
aws ec2 create-security-group --group-name SSHAccess --description "Security group for SSH access" --vpc-id vpc-0cfbc96fbaef27b5e
//aws ec2 authorize-security-group-ingress --group-id sg-05cd677a2f4a11771 --protocol tcp --port 22 --cidr xx.xx.xx.xx/32

// Create ec2 instance ami-0db9040eb3ab74509
aws ec2 run-instances --image-id ami-0db9040eb3ab74509 --count 1 --instance-type t2.micro --key-name key-pair-for-instance1 --subnet-id subnet-050bcaac94fba9394 --iam-instance-profile Name=ssm-instance-profile-for-ec2-instances --security-group-ids sg-05cd677a2f4a11771

aws ssm describe-instance-information

// SSH into ec2 instance via AWS Systems Manager
aws ssm start-session --target i-057e4c58a6b7865a8
